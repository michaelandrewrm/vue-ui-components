{
	"extends": "@vue/tsconfig/tsconfig.dom.json",
	"include": ["env.d.ts", "src/**/*", "src/**/*.vue", "src/**/*.d.ts"],
	"exclude": ["src/**/__tests__/*"],
	"compilerOptions": {
		"composite": true,
		"tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
		"baseUrl": ".",
		"paths": {
			"@/*": ["./src/*"]
		},
		"types": ["vite/client"],

		// Base compiler options:
		// A few notes:
		// - Vue 3 supports ES2016+
		// - For Vite, the actual compilation target is determined by the
		//   `build.target` option in the Vite config.
		//   So don't change the `target` field here. It has to be
		//   at least `ES2020` for dynamic `import()`s and `import.meta` to work correctly.
		// - If you are not using Vite, feel free to overwrite the `target` field.
		"target": "ESNext",

		// For spec compilance.
		// `true` by default if the `target` is `ES2020` or higher.
		// Explicitly set it to `true` here in case some users want to overwrite the `target`.
		"useDefineForClassFields": true,

		// <https://devblogs.microsoft.com/typescript/announcing-typescript-5-0/#verbatimmodulesyntax>
		// Any imports or exports without a type modifier are left around. This is important for `<script setup>`.
		// Anything that uses the type modifier is dropped entirely.
		"verbatimModuleSyntax": true,

		// As long as you are using a build tool, we recommend you to author and ship in ES modules.
		// Even if you are targeting Node.js, because
		//  - `CommonJS` is too outdated
		//  - the ecosystem hasn't fully caught up with `Node16`/`NodeNext`
		// This recommendation includes environments like Vitest, Vite Config File, Vite SSR, etc.
		"module": "ESNext",
		"moduleResolution": "bundler",
		"resolveJsonModule": true,
		"lib": [
			// Target ES2020 to align with Vite.
			// <https://vitejs.dev/config/build-options.html#build-target>
			// Support for newer versions of language built-ins are
			// left for the users to include, because that would require:
			//   - either the project doesn't need to support older versions of browsers;
			//   - or the project has properly included the necessary polyfills.
			"ES2020",
			"DOM",
			"DOM.Iterable"
		],

		// `allowImportingTsExtensions` can only be used when `noEmit` or `emitDeclarationOnly` is set.
		// But `noEmit` may cause problems with solution-style tsconfigs:
		// <https://github.com/microsoft/TypeScript/issues/49844>
		// And `emitDeclarationOnly` is not always wanted.
		"allowImportingTsExtensions": true,
		"allowSyntheticDefaultImports": true,

		// Required in Vite
		"isolatedModules": true,

		// Required in Vue projects
		"jsx": "preserve",
		"jsxImportSource": "vue",

		// This enables stricter inference for data properties on `this`.
		"noImplicitThis": true,
		"strict": true,
		// Most non-library projects don't need to emit declarations.
		// So we add this option by default to make the config more friendly to most users.
		"noEmit": true,
		"noUnusedLocals": true,
		"noUnusedParameters": true,

		// Ensures that any non-empty case inside a switch statement includes
		// either break, return, or throw
		"noFallthroughCasesInSwitch": true,

		// Recommended
		"esModuleInterop": true,
		"forceConsistentCasingInFileNames": true,
		// See <https://github.com/vuejs/vue-cli/pull/5688>
		"skipLibCheck": true,

		"allowJs": true,
		"checkJs": true,
		"outDir": "dist",
		"declaration": true,
		"declarationDir": "dist"
	}
}
